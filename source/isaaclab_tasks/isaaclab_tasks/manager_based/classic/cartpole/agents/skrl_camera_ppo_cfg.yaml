# cartpole_camera_skrl_ppo.yaml
# SKRL PPO config pro vizuální (RGB) pozorování – ekvivalent rl_games cartpole camera
# Vychází z tvého původního SKRL PPO (bez kamery) a z rl_games_camera_ppo_cfg.yaml.
# - CNN: 32@8x8 s=4 -> 64@4x4 s=2 -> 64@3x3 s=1, ReLU
# - MLP hlava: 512, ELU
# - PPO: LR 1e-4, KL adaptive (0.008), clip 0.2, mini_epochs 4, gradient clip 1.0
# Pozn.: frame stacking (4 snímky) řeší env/wrapper; tady jen přebíráme stacked obraz.

seed: 42

models:
  separate: False   # sdílená architektura pro policy i value (jako rl_games: actor_critic.separate=False)
  policy:
    class: GaussianMixin
    clip_actions: True
    clip_log_std: True
    min_log_std: -20.0
    max_log_std: 2.0
    initial_log_std: 0.0     # ekvivalent fixed_sigma v rl_games ~ logσ=0 (σ≈1); neměníme učení σ
    # Síť: CNN -> flatten -> MLP
    network:
      - name: conv            # CNN extraktor z RGB
        # očekává HWC -> převedeme na CHW pro Conv2d
        input: permute(OBSERVATIONS, (0, 3, 1, 2))
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 4, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: mlp             # MLP hlava
        input: conv
        layers: [512]
        activations: elu
    output: ACTIONS

  value:
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: conv
        input: permute(OBSERVATIONS, (0, 3, 1, 2))
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 4, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: mlp
        input: conv
        layers: [512]
        activations: elu
    output: ONE

memory:
  class: RandomMemory
  memory_size: -1   # = rollouts * num_envs (nastaví se automaticky)

agent:
  class: PPO
  # Rollout délka ~ rl_games horizon_length=64
  rollouts: 64
  # Učení ~ rl_games mini_epochs=4
  learning_epochs: 4
  # Mini-batches: nastav tak, aby přibližně vyšla velikost 2048 (rl_games:minibatch_size)
  # Příklad: pokud máš num_envs=32, batch=32*64=2048 -> mini_batches: 1
  # Pokud máš num_envs=64, batch=4096 -> mini_batches: 2 (≈2048)
  mini_batches: 2

  discount_factor: 0.99        # gamma
  lambda: 0.95                  # tau (GAE)
  learning_rate: 1.0e-04
  learning_rate_scheduler: KLAdaptiveLR
  learning_rate_scheduler_kwargs:
    kl_threshold: 0.008
  state_preprocessor: null      # normalize_input=False v rl_games
  state_preprocessor_kwargs: null
  value_preprocessor: RunningStandardScaler   # normalize_value=True v rl_games
  value_preprocessor_kwargs: null
  random_timesteps: 0
  learning_starts: 0
  grad_norm_clip: 1.0
  ratio_clip: 0.2
  value_clip: 0.2
  clip_predicted_values: True
  entropy_loss_scale: 0.0
  value_loss_scale: 2.0
  kl_threshold: 0.0
  rewards_shaper_scale: 1.0
  time_limit_bootstrap: False

  experiment:
    directory: "cartpole_camera_skrl"
    experiment_name: ""
    write_interval: auto
    checkpoint_interval: auto

trainer:
  class: SequentialTrainer
  # Nastav podle potřeby; rl_games má max_epochs=500 a horizon_length=64
  # Tady dáme konzervativně víc kroků než původní SKRL bez kamery.
  timesteps: 100000
  environment_info: log
